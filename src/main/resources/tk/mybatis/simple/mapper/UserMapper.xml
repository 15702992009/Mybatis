<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">

    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--如果我要引用别的xml文件中的resultMap 怎么引用 ? -->

    <resultMap id="userRoleMap" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <association property="roleList" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>

    <!-- select 中包含的是额外的查询-->
    <resultMap id="userRoleMapSelect" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <association property="role"
                     fetchType="lazy"
                     select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"
                     column="{id=role_id}"/>
    </resultMap>
    <!--    P141-->
<!--    <resultMap id="userRoleListMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <collection property="roleList" columnPrefix="role_" ofType="tk.mybatis.simple.model.SysRole">
            <id property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled"/>
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </collection>
    </resultMap>-->
    <!--    P141简化-->
   <!-- <resultMap id="userRoleListMap" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>-->
    <resultMap id="userRoleListMap" extends="userMap" type="SysUser">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>
	<resultMap id="userRoleListMapSelect" extends="userMap" type="SysUser">
		<collection property="roleList"
					fetchType="lazy"
					select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"
					column="{userId=id}"/>

	</resultMap>

    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{id}
	</select>

    <insert id="insert">
        insert into sys_user (
        id,user_name,user_password,user_email,user_info,head_img,create_time
        )
        values (
        #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},
        #{createTime,jdbcType=TIMESTAMP}
        )
    </insert>
<!--	    <select id="selectById" flushCache="true" resultMap="userMap">  flushCache属性清空一级缓存-->
    <select id="selectById"  resultMap="userMap">
        select *  from  sys_user where id =#{id}
    </select>

    <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime,
            u.user_name as "user.userName",
            u.user_email as "user.userEmail"
        from
            sys_user u
        inner join sys_user_role ur on u.id=ur.user_id
        inner join sys_role r on ur.role_id=r.id
        where u.id=#{userId}
    </select>

    <!--    1. 在配置文件setting标签中将mapUnderscoreToCamelCase配置为true-->
    <select id="selectALl" resultType="tk.mybatis.simple.model.SysUser">
        select id,user_password ,user_email ,user_info ,head_img ,create_time from sys_user
    </select>
    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        select id,user_name,user_password,user_email,user_info,head_img,create_time from sys_user
        where 1=1
        <if test="userName!=null and userName!='' ">
            and user_name like concat('%', #{userName},'%')
        </if>
        <if test="userEmail!=null and userEmail != ''">
            and user_email = #{userEmail}
        </if>
    </select>

    <select id="selectUserAndRoleById" resultType="tk.mybatis.simple.model.SysUser">
		select
		   	u.id,
		   	u.user_name userName,
		    u.user_password userPassword,
		    u.user_email userEmail,
		    u.user_info userInfo,
		    u.head_img headImg,
		    u.create_time createTime,
			r.id "role.id",
			r.role_name "role.roleName",
			r.enabled "role.enabled",
			r.create_by "role.createBy",
			r.create_time "role.createTime"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{id}
	</select>
    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			ur.role_id
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
	    where u.id = #{id}
	</select>
    <!--    2. 常规方法-->
    <!--    <select id="selectALl" resultType="tk.mybatis.simple.model.SysUser">
        select id,user_name userName,
    user_password  userPassword,
    user_email userEmail,
    user_info userInfo,
    head_img headImg,
    create_time createTime
    from sys_user
    </select> -->
<!--    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        select
            u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
	        r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
    </select>-->
    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
	        r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time,
			p.id role_privilege_id,
			p.privilege_name role_privilege_privilege_name,
			p.privilege_url role_privilege_privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		inner join sys_role_privilege rp on rp.role_id = r.id
		inner join sys_privilege p on p.id = rp.privilege_id
	</select>

	<select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
		select
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time
		from sys_user u
		where u.id=#{id}
	</select>
	<select id="selectUserById" statementType="CALLABLE" useCache="false">
	    {call select_user_by_id(
	    	#{id, mode=IN},
	    	#{userName, mode=OUT, jdbcType=VARCHAR},
	    	#{userPassword, mode=OUT, jdbcType=VARCHAR},
	    	#{userEmail, mode=OUT, jdbcType=VARCHAR},
	    	#{userInfo, mode=OUT, jdbcType=VARCHAR},
	    	#{headImg, mode=OUT, jdbcType=BLOB, javaType=_byte[]},
	    	#{createTime, mode=OUT, jdbcType=TIMESTAMP}


	    )}
	</select>
	<select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
	    {call select_user_page(
	    	#{userName, mode=IN},
	    	#{offset, mode=IN},
	    	#{limit, mode=IN},
	    	#{total, mode=OUT, jdbcType=BIGINT}
	    )}
	</select>
	<insert id="insertUserAndRoles" statementType="CALLABLE">
	    {call insert_user_and_roles(
	    	#{user.id, mode=OUT, jdbcType=BIGINT},
	    	#{user.userName, mode=IN},
	    	#{user.userPassword, mode=IN},
	    	#{user.userEmail, mode=IN},
	    	#{user.userInfo, mode=IN},
	    	#{user.headImg, mode=IN, jdbcType=BLOB},
	    	#{user.createTime, mode=OUT, jdbcType=TIMESTAMP},
	    	#{roleId, mode=IN}
	    )}
	</insert>

	<delete id="deleteUserById" statementType="CALLABLE">
	    {call delete_user_by_id(#{id, mode=IN})}
	</delete>

</mapper>